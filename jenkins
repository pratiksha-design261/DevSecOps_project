pipeline{
    
    //adding tools in agents
    agent any
    environment{
        SONAR_HOME = tool "SonarTool"      // add name which is mention while adding sonar scanner in tool
    } 
    
    stages{
        
        stage("Clone Code"){
            steps{
                git url: "https://github.com/pratiksha-design261/DevSecOps_project.git", branch: "main"
                echo "Code cloned"
            }
        }

        stage("SonarQube Analysis"){
            steps{
                withSonarQubeEnv("Sonar"){              //the Sonar is used in 
                    sh "$SONAR_HOME/bin/sonar-scanner -Dsonar.projectName=Pratiksha_Devsecops_project -Dsonar.projectKey=NoteToDo"
                }
            }
        }
        
        stage("SonarQube Quality Gates"){
            steps{
                timeout(time: 1, unit: "MINUTES"){
                    waitForQualityGate abortPipeline: false
                }
            }
        }

        stage("OWASP DC"){
            steps{
                dependencyCheck additionalArguments: '--scan ./', odcInstallation: 'OWASP'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }

        stage("Build & Test"){
            steps{
                sh "docker build . -t notes-devsecops-app-jenkins:latest"
                echo "Built successfully, and tested without error"
            }
        }

        stage("Trivy"){
            steps{
                sh "docket image ${env.dockerhubUser}/notes-devsecops-app-jenkins:latest"
            }
        }

        
        stage("Push Image to Docker"){
            steps{
                withCredentials(
                    [usernamePassword(
                        credentialsId:"DockerID",
                        passwordVariable:"dockerHubPass",
                        usernameVariable:"dockerhubUser"
                        )
                    ]
                ){
                sh "docker image tag notes-devsecops-app-jenkins:latest ${env.dockerhubUser}/notes-devsecops-app-jenkins:latest"
                sh "docker login -u ${env.dockerhubUser} -p ${env.dockerHubPass}"
                sh "docker push ${env.dockerhubUser}/notes-devsecops-app-jenkins:latest"
                }
                echo "Image pushed successfully"
            }
        }

        stage("deploy"){
            steps{
                //sh "docker run -d -p 8000:8000 --name Django-note-app notes-app:latest"
                sh "docker compose down"
                sh "docker compose up -d"
                echo "DEployment is done"
            }
        }
        
    }
}
